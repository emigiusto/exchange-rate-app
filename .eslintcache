[{"C:\\Users\\emigi\\OneDrive\\Documentos\\GitHub\\opeepl-test\\src\\index.js":"1","C:\\Users\\emigi\\OneDrive\\Documentos\\GitHub\\opeepl-test\\src\\App.js":"2","C:\\Users\\emigi\\OneDrive\\Documentos\\GitHub\\opeepl-test\\src\\components\\CurrencyRow.js":"3","C:\\Users\\emigi\\OneDrive\\Documentos\\GitHub\\opeepl-test\\src\\components\\SelectBox.js":"4","C:\\Users\\emigi\\OneDrive\\Documentos\\GitHub\\opeepl-test\\src\\converters\\CurrencyConverter.js":"5","C:\\Users\\emigi\\OneDrive\\Documentos\\GitHub\\opeepl-test\\src\\service\\currencyExchangeService.js":"6","C:\\Users\\emigi\\OneDrive\\Documentos\\GitHub\\opeepl-test\\src\\converters\\helpers\\worldCurrencyConverter.js":"7","C:\\Users\\emigi\\OneDrive\\Documentos\\GitHub\\opeepl-test\\src\\converters\\helpers\\cryptoCurrencyConverter.js":"8","C:\\Users\\emigi\\OneDrive\\Documentos\\GitHub\\opeepl-test\\src\\service\\exchangeService.js":"9"},{"size":207,"mtime":1608116214642,"results":"10","hashOfConfig":"11"},{"size":4571,"mtime":1608663965831,"results":"12","hashOfConfig":"11"},{"size":980,"mtime":1608655800705,"results":"13","hashOfConfig":"11"},{"size":555,"mtime":1608655800706,"results":"14","hashOfConfig":"11"},{"size":464,"mtime":1608661427411,"results":"15","hashOfConfig":"11"},{"size":1812,"mtime":1608662842808,"results":"16","hashOfConfig":"11"},{"size":1503,"mtime":1608663768987,"results":"17","hashOfConfig":"11"},{"size":2040,"mtime":1608658050383,"results":"18","hashOfConfig":"11"},{"size":1189,"mtime":1608663965831,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1j7fdye",{"filePath":"23","messages":"24","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"22"},"C:\\Users\\emigi\\OneDrive\\Documentos\\GitHub\\opeepl-test\\src\\index.js",[],["43","44"],"C:\\Users\\emigi\\OneDrive\\Documentos\\GitHub\\opeepl-test\\src\\App.js",["45","46","47"],"import React, {useEffect, useState} from 'react';\r\nimport './App.css'\r\nimport CurrencyRow from './components/CurrencyRow'\r\n//import {anyCointoCrypto,cryptoToCrypto,getCryptoInfo} from './converters/CurrencyConverter'\r\n//import {getNormalCurrencies,getNormalExchangeRate} from './converters/worldCurrencyConverter'\r\n\r\nimport {getPairsRates, getPairExchangeRate} from './service/exchangeService'\r\n\r\nfunction App() {\r\n\r\n  const [currencyOptions, setCurrencyOptions] = useState([])\r\n  const [fromCurrency, setFromCurrency] = useState()\r\n  const [toCurrency, setToCurrency] = useState()\r\n  const [exchangeRate, setExchangeRate] = useState()\r\n  const [amount, setAmount] = useState(1)\r\n  const [amountiInFromCurrency, setAmountiInFromCurrency] = useState(true)\r\n  //const [currencyService, setCurrencyService] = useState()\r\n  \r\n  let toAmount, fromAmount;\r\n  //Decides which input we should update (the opposite from the user' changes)\r\n  if (amountiInFromCurrency) {\r\n    fromAmount = amount\r\n    toAmount = amount * exchangeRate\r\n  } else {\r\n    toAmount = amount\r\n    fromAmount = amount / exchangeRate\r\n  }\r\n\r\n  //Runs when mounting the App getting loading available currency and first exchange rate\r\n  useEffect(()=>{\r\n  })\r\n    /* Returns an object with the rate from the first coin and the array of all normal Currencies\r\n      { \r\n        firstRate: 1.45, (Rate from the first coin in the array below)\r\n        currenciesArray: [{name: \"CAD\", crypto: false}, {name: \"GBP\", crypto: false}...]\r\n      }\r\n    *//*\r\n    getNormalCurrencies().then((normalCurrenciesArray) => {\r\n      //Gets an array including all crypto currencys with USDT pair in the market\r\n      getCryptoInfo().then(allUSDcryptos => {\r\n        var allCurrencies = [...normalCurrenciesArray.currenciesArray,...allUSDcryptos]\r\n\r\n        // Stores all currencies on state to load them on CurrencyRow component\r\n          setCurrencyOptions(allCurrencies)\r\n        // Defines the default currency shown on both ends (From and To)\r\n          setFromCurrency(allCurrencies[0].name)\r\n          setToCurrency(allCurrencies[1].name)\r\n        //Sets the exchange rate to the firstCurrencyReturned Rate\r\n          setExchangeRate(normalCurrenciesArray.firstRate)\r\n      })\r\n    })\r\n  }, [])\r\n\r\n  //Runs everytime the user changes the currency selection\r\n  \r\n  */\r\n useEffect(()=>{\r\n\r\n    var pairs = getPairsRates({name: \"USD\", market: \"world\"},{name: \"EUR\", market: \"world\"})\r\n    console.log(pairs)\r\n    /*if (fromCurrency!=null && toCurrency!=null && fromCurrency!== toCurrency) {\r\n      //Checks if from and to are CryptoCurrency\r\n      const isFromCrypto = currencyOptions.find(currency => currency.name === fromCurrency).crypto;\r\n      const isToCrypto = currencyOptions.find(currency => currency.name === toCurrency).crypto;\r\n\r\n      //Based on the inputs being crypto or normal currency, sets the new ExchangeRate\r\n      if (isFromCrypto && isToCrypto) {\r\n        cryptoToCrypto(fromCurrency,toCurrency)\r\n          .then(res => setExchangeRate(res))\r\n      } else if (isFromCrypto && !isToCrypto) {\r\n        anyCointoCrypto(toCurrency,fromCurrency)\r\n          .then(res => setExchangeRate(1/res))\r\n      } else if (!isFromCrypto && isToCrypto) {\r\n        anyCointoCrypto(fromCurrency,toCurrency)\r\n          .then(res => setExchangeRate(res))\r\n      } else {\r\n        getNormalExchangeRate(fromCurrency,toCurrency).then(exchangeRate => setExchangeRate(exchangeRate)) \r\n      } \r\n    } else if (fromCurrency === toCurrency){\r\n      setExchangeRate(1)\r\n    }*/\r\n  },[])//, [fromCurrency,toCurrency])\r\n\r\n\r\n  function handleFromAmountChange(e) {\r\n    setAmount(e.target.value)\r\n    setAmountiInFromCurrency(true)\r\n  }\r\n\r\n  function handleToAmountChange(e) {\r\n    setAmount(e.target.value)\r\n    setAmountiInFromCurrency(false)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1 className=\"convert-title\">Convert</h1>\r\n      <CurrencyRow className=\"currency-row\"\r\n          currencyOptions={currencyOptions}\r\n          selectedCurrency={fromCurrency}\r\n          onChangeCurrency={e => setFromCurrency(e.target.value)}\r\n          amount={fromAmount}\r\n          onChangeAmount= {handleFromAmountChange}>\r\n      </CurrencyRow>\r\n      <h2 className=\"equals\">=</h2>\r\n      <CurrencyRow className=\"currency-row\"\r\n            currencyOptions={currencyOptions}\r\n            selectedCurrency={toCurrency}\r\n            onChangeCurrency={e => setToCurrency(e.target.value)}\r\n            amount={toAmount}\r\n            onChangeAmount= {handleToAmountChange}>\r\n      </CurrencyRow>\r\n    </div>\r\n    \r\n  );\r\n  }\r\n\r\nexport default App;\r\n","C:\\Users\\emigi\\OneDrive\\Documentos\\GitHub\\opeepl-test\\src\\components\\CurrencyRow.js",[],"C:\\Users\\emigi\\OneDrive\\Documentos\\GitHub\\opeepl-test\\src\\components\\SelectBox.js",[],"C:\\Users\\emigi\\OneDrive\\Documentos\\GitHub\\opeepl-test\\src\\converters\\CurrencyConverter.js",[],["48","49"],"C:\\Users\\emigi\\OneDrive\\Documentos\\GitHub\\opeepl-test\\src\\service\\currencyExchangeService.js",[],"C:\\Users\\emigi\\OneDrive\\Documentos\\GitHub\\opeepl-test\\src\\converters\\helpers\\worldCurrencyConverter.js",[],"C:\\Users\\emigi\\OneDrive\\Documentos\\GitHub\\opeepl-test\\src\\converters\\helpers\\cryptoCurrencyConverter.js",[],["50","51"],"C:\\Users\\emigi\\OneDrive\\Documentos\\GitHub\\opeepl-test\\src\\service\\exchangeService.js",["52"],"import {anyCointoCrypto,cryptoToCrypto} from '../converters/helpers/cryptoCurrencyConverter';\r\nimport {getWorldExchangeRate} from '../converters/helpers/worldCurrencyConverter';\r\n\r\nconst getPairsRates = async (currency1,currency2) => {\r\n    var pairsArray;\r\n    if ((currency1.market === \"crypto\" && currency2.market === \"world\")  || (currency1.market === \"world\" && currency2.market === \"crypto\")) {\r\n        pairsArray = anyCointoCrypto(currency1)\r\n    } else if (currency1.market === \"crypto\" && currency2.market === \"crypto\"){\r\n        pairsArray = cryptoToCrypto(currency1)\r\n    } else if (currency1.market === \"world\" && currency2.market === \"world\"){\r\n        pairsArray = getWorldExchangeRate(currency1)\r\n    } else {\r\n        return null\r\n    }\r\n    console.log(pairsArray)\r\n    return pairsArray\r\n}\r\n\r\nconst getPairExchangeRate = async (currency1,currency2) => {\r\n    if (isPairAvailable(currency1,currency2)){\r\n        return 1.5\r\n    } else {\r\n        var rates = this.getExchangeRates(currency1,currency2)\r\n        return rates\r\n    }\r\n}\r\n\r\nconst isPairAvailable = async (currency1,currency2) => {\r\n\r\n    return true\r\n}\r\n\r\nmodule.exports = {getPairsRates, getPairExchangeRate}",{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":7,"column":24,"nodeType":"59","messageId":"60","endLine":7,"endColumn":43},{"ruleId":"57","severity":1,"message":"61","line":11,"column":27,"nodeType":"59","messageId":"60","endLine":11,"endColumn":45},{"ruleId":"57","severity":1,"message":"62","line":14,"column":24,"nodeType":"59","messageId":"60","endLine":14,"endColumn":39},{"ruleId":"53","replacedBy":"63"},{"ruleId":"55","replacedBy":"64"},{"ruleId":"53","replacedBy":"65"},{"ruleId":"55","replacedBy":"66"},{"ruleId":null,"fatal":true,"severity":2,"message":"67","line":33,"column":29},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"no-unused-vars","'getPairExchangeRate' is defined but never used.","Identifier","unusedVar","'setCurrencyOptions' is assigned a value but never used.","'setExchangeRate' is assigned a value but never used.",["68"],["69"],["68"],["69"],"Parsing error: Unexpected token, expected \";\"\n\n\u001b[0m \u001b[90m 31 | \u001b[39m}\u001b[0m\n\u001b[0m \u001b[90m 32 | \u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 33 | \u001b[39m\u001b[36mexport\u001b[39m \u001b[36mdefault\u001b[39m getPairsRates\u001b[33m,\u001b[39m getPairExchangeRate\u001b[0m\n\u001b[0m \u001b[90m    | \u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m","no-global-assign","no-unsafe-negation"]